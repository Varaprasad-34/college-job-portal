{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Job API functions\nexport const jobAPI = {\n  // Get all jobs with filters\n  getJobs: async (params = {}) => {\n    const response = await axios.get('/jobs', {\n      params\n    });\n    return response.data;\n  },\n  // Get single job by ID\n  getJob: async id => {\n    const response = await axios.get(`/jobs/${id}`);\n    return response.data;\n  },\n  // Create new job\n  createJob: async jobData => {\n    const response = await axios.post('/jobs', jobData);\n    return response.data;\n  },\n  // Update job\n  updateJob: async (id, jobData) => {\n    const response = await axios.put(`/jobs/${id}`, jobData);\n    return response.data;\n  },\n  // Delete job\n  deleteJob: async id => {\n    const response = await axios.delete(`/jobs/${id}`);\n    return response.data;\n  }\n};\n\n// User API functions\nexport const userAPI = {\n  // Get user profile\n  getProfile: async id => {\n    const response = await axios.get(`/users/profile/${id}`);\n    return response.data;\n  },\n  // Get user's posted jobs\n  getMyJobs: async () => {\n    const response = await axios.get('/users/my-jobs');\n    return response.data;\n  },\n  // Apply for job\n  applyForJob: async jobId => {\n    const response = await axios.post(`/users/apply/${jobId}`);\n    return response.data;\n  },\n  // Get user's applications\n  getMyApplications: async () => {\n    const response = await axios.get('/users/my-applications');\n    return response.data;\n  },\n  // Update application status\n  updateApplicationStatus: async (jobId, userId, status) => {\n    const response = await axios.put(`/users/application-status/${jobId}/${userId}`, {\n      status\n    });\n    return response.data;\n  }\n};\n\n// Helper function to handle API errors\nexport const handleAPIError = error => {\n  if (error.response) {\n    // Server responded with error status\n    return error.response.data.message || 'An error occurred';\n  } else if (error.request) {\n    // Request was made but no response received\n    return 'Network error. Please check your connection.';\n  } else {\n    // Something else happened\n    return 'An unexpected error occurred';\n  }\n};\nexport default {\n  jobAPI,\n  userAPI,\n  handleAPIError\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","jobAPI","getJobs","params","response","get","data","getJob","id","createJob","jobData","post","updateJob","put","deleteJob","delete","userAPI","getProfile","getMyJobs","applyForJob","jobId","getMyApplications","updateApplicationStatus","userId","status","handleAPIError","error","message","request"],"sources":["C:/Users/warpr/OneDrive/Desktop/college-job-portal/college-job-portal/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Job API functions\nexport const jobAPI = {\n  // Get all jobs with filters\n  getJobs: async (params = {}) => {\n    const response = await axios.get('/jobs', { params });\n    return response.data;\n  },\n\n  // Get single job by ID\n  getJob: async (id) => {\n    const response = await axios.get(`/jobs/${id}`);\n    return response.data;\n  },\n\n  // Create new job\n  createJob: async (jobData) => {\n    const response = await axios.post('/jobs', jobData);\n    return response.data;\n  },\n\n  // Update job\n  updateJob: async (id, jobData) => {\n    const response = await axios.put(`/jobs/${id}`, jobData);\n    return response.data;\n  },\n\n  // Delete job\n  deleteJob: async (id) => {\n    const response = await axios.delete(`/jobs/${id}`);\n    return response.data;\n  }\n};\n\n// User API functions\nexport const userAPI = {\n  // Get user profile\n  getProfile: async (id) => {\n    const response = await axios.get(`/users/profile/${id}`);\n    return response.data;\n  },\n\n  // Get user's posted jobs\n  getMyJobs: async () => {\n    const response = await axios.get('/users/my-jobs');\n    return response.data;\n  },\n\n  // Apply for job\n  applyForJob: async (jobId) => {\n    const response = await axios.post(`/users/apply/${jobId}`);\n    return response.data;\n  },\n\n  // Get user's applications\n  getMyApplications: async () => {\n    const response = await axios.get('/users/my-applications');\n    return response.data;\n  },\n\n  // Update application status\n  updateApplicationStatus: async (jobId, userId, status) => {\n    const response = await axios.put(`/users/application-status/${jobId}/${userId}`, { status });\n    return response.data;\n  }\n};\n\n// Helper function to handle API errors\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // Server responded with error status\n    return error.response.data.message || 'An error occurred';\n  } else if (error.request) {\n    // Request was made but no response received\n    return 'Network error. Please check your connection.';\n  } else {\n    // Something else happened\n    return 'An unexpected error occurred';\n  }\n};\n\nexport default {\n  jobAPI,\n  userAPI,\n  handleAPIError\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}